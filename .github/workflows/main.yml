name: .NET Core CI - Space Mission
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # N√©cessaire pour certaines analyses de code

      - name: V√©rifier message de commit spatial üöÄ
        if: github.event_name == 'push'
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! echo "$COMMIT_MSG" | grep -q -E '(üöÄ|üõ∞Ô∏è|üå†|üåå|üë©‚ÄçüöÄ|üë®‚ÄçüöÄ|üåü|ü™ê|üåë|üåô|‚òÑÔ∏è|üå†)'; then
            echo "::error::Le commit du cosmonaute : Ton message de commit doit contenir un emoji spatial!"
            exit 1
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '7.0.x'

      - uses: actions/cache@v3
        id: nuget-cache
        with:
          path: ~/.nuget/packages/
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: D√©tection des d√©pendances circulaires üîÑ
        run: |
            echo "üîç Recherche de d√©pendances circulaires..."
            pwsh -File detect-circular.ps1    
      - name: Restore NuGet Packages
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Lancement des tests spatiaux üß™
        id: test
        continue-on-error: true
        run: |
          START_TIME=$(date +%s)
          dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "test_success=$?" >> $GITHUB_OUTPUT

      - name: M√©t√©o des tests üå¶Ô∏è
        if: always()
        run: |
          if [ "${{ steps.test.outputs.test_success }}" == "0" ]; then
            echo "‚òÄÔ∏è Tests r√©ussis ! Le soleil brille sur notre mission spatiale !"
            echo "::set-output name=weather::sunny"
          else
            echo "‚õàÔ∏è Alerte m√©t√©o spatiale ! Temp√™te d√©tect√©e dans les tests !"
            echo "::set-output name=weather::storm"
          fi

      - name: Alien Code Review üëΩ
        if: steps.test.outputs.test_success != '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const alienMessages = [
              "üëΩ Humain, ton code est incompr√©hensible pour ma civilisation. Peux-tu ajouter des tests ?",
              "üõ∏ Nos scanners extraterrestres ont d√©tect√© des anomalies dans votre logique terrienne.",
              "üëæ Code erreur 42: Logique humaine incoh√©rente d√©tect√©e.",
              "ü™ê Par les anneaux de Saturne ! Ce code ne passerait pas les standards galactiques.",
              "üåå La F√©d√©ration Intergalactique du Code d√©sapprouve ces pratiques."
            ];
            const randomMessage = alienMessages[Math.floor(Math.random() * alienMessages.length)];
            
            const issue_number = context.issue.number;
            if (issue_number) {
              github.rest.issues.createComment({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: randomMessage
              });
            }

      - name: Mesurer la couverture de code
        if: always()
        id: coverage
        run: |
          # Installe l'outil de rapport de couverture si n√©cessaire
          dotnet tool install -g dotnet-reportgenerator-globaltool || true
          reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage/report -reporttypes:Html
          
          # Extraire le pourcentage de couverture (exemple simple)
          COVERAGE=$(grep -o '[0-9]*\.[0-9]*%' ./coverage/report/summary.txt || echo "0%")
          COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
          echo "coverage=$COVERAGE_NUM" >> $GITHUB_OUTPUT

      - name: Lancement Spatial üöÄ
        if: always()
        run: |
          COVERAGE="${{ steps.coverage.outputs.coverage }}"
          if [ $(echo "$COVERAGE > 80" | bc -l) -eq 1 ]; then
            echo "üöÄ D√©collage r√©ussi ! Couverture de code √† $COVERAGE% !"
            echo "
            
                   /\\
                  /  \\
                 |    |
                 |    |
                 |    |
                /      \\
               /        \\
              /          \\
             /            \\
            /              \\
           /                \\
           ------------------
                 /  \\
                /    \\
               |      |
                \\__/
            "
          elif [ $(echo "$COVERAGE < 50" | bc -l) -eq 1 ]; then
            echo "üí• Explosion √† $COVERAGE% de couverture !"
            echo "
            
                   /\\
                  /  \\
                 |    |
               * \\__/ *
              ***    ***
             *****  *****
              ***    ***
               *      *
            "
          else
            echo "üîÑ En orbite √† $COVERAGE% de couverture"
          fi

      - name: Vitesse Interstellaire ‚è±Ô∏è
        if: always()
        run: |
          DURATION="${{ steps.test.outputs.duration }}"
          echo "Tests compl√©t√©s en $DURATION secondes"
          
          # Conversion en vitesse Warp imaginaire
          WARP=$(echo "scale=2; 10 - (($DURATION / 30) * 5)" | bc -l)
          if [ $(echo "$WARP > 0" | bc -l) -eq 1 ]; then
            echo "üå† Tests ex√©cut√©s √† Warp $WARP !"
          else
            echo "üêå Tests plus lents qu'un vaisseau √† propulsion conventionnelle !"
          fi

      - name: Journal de bord stellaire üìù
        if: github.event_name == 'push'
        run: |
          DATE_STELLAIRE=$(date +%Y.%m.%d)
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Journal de bord, date stellaire $DATE_STELLAIRE : $COMMIT_MSG" > stellar_log.txt
          echo "üìú Entr√©e ajout√©e au journal de bord stellaire"

      - name: D√©tection trou noir üï≥Ô∏è
        if: github.event_name == 'push'
        run: |
          ADDED=$(git diff --stat HEAD^ HEAD | tail -n 1 | awk '{print $4}')
          DELETED=$(git diff --stat HEAD^ HEAD | tail -n 1 | awk '{print $6}')
          
          if [ -n "$DELETED" ] && [ -n "$ADDED" ] && [ $DELETED -gt $ADDED ]; then
            echo "üï≥Ô∏è Trou noir d√©tect√© ! $DELETED lignes supprim√©es, seulement $ADDED ajout√©es."
          fi

      - name: Notification Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow
          text: |
            ${{ steps.test.outputs.weather == 'sunny' && '‚òÄÔ∏è Mission spatiale r√©ussie !' || '‚õàÔ∏è Probl√®mes dans la station spatiale !' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
